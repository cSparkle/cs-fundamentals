1. Trees are a group of data structures that represent a hierarchical organization of data, similar to a family tree.
Binary trees are distinct in that they can have at most two child nodes branching off from a parent node. All binary trees
are tree data structures, but not all tree data structures are binary. 

2. In computer science, a heuristic references algorithmic guesses that aim to reduce the length of time required to solve a problem. 
Essentially, it is using previously obtained information to form judgements (a.k.a. guesses) that bring an algorithm closer to finding a solution.

3. Heuristics might be used by more advanced software such as the Amazon Alexa or Google Home to decipher the meaning of input.
For instance, if I say "Hey Google, tell me what the weather is like today," she knows that I'm not asking about the weather in India, but that I'm
asking what the weather will be like where I live.

4. A depth-first search searches the depth of a node branch until it reaches the end, then traverses back up the branch to search all other branch offs. 
Conversely, a breadth-first search goes row by row searching siblings before searching children. In essence, depth-first goes vertically whereas breadth-first runs horizontally.

5. Undirected means the graph is not linear and a node could theoretically be connected to any other node. It is the opposite of a linked list, where each node is connected in order. 
A-cyclic refers to the fact that a circular connection cannot be made. For instance, if there are four nodes (1, 2, 3, 4) connected in order, node 4 will not point back to node 1. Finally,
unweighted means that each node carries the same "weight" or significance relative to all other nodes and travel between two nodes is just as "costly" as travel between two different nodes.

6. A binary tree would be a directed, a-cyclic, unweighted graph.

PROGRAMMING QUESTIONS

1.

class Node {
    constructor(data, left = null, right = null) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
};

class BST {
    constructor() {
        this.root = null;
    }

    isPresent(data) {
        let current = this.root;
        while (current) {
            if (data === current.data) {
                return true;
            }
            if (data < current.data) {
                current = current.left;
            } else {
                current = current.right;
            }
        }
        return false;
    };
};


2.

class Node {
    constructor(data, left = null, right = null) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
};

class BST {
    constructor() {
        this.root = null;
    }

    find(data) {
        let current = this.root;
        let distance = 0;
        while (current.data !== data) {
            if (data < current.data) {
                current = current.left;
                distance += 1;
            } else {
                current = current.right;
                distance += 1;
            }
            if (current === null) {
                return null;
            }
        }
        return distance;
    };

    findDistance(node1, node2) {
        const ancestor = this.root;
        const node1Spot = find(node1);
        const node2Spot = find(node2);
        let distanceBetween;
        console.log(node1Spot);
        console.log(node2Spot);
        if ((node1 > ancestor && node2 < ancestor) || (node1 < ancestor && node2 > ancestor)) {
            distanceBetween = node1Spot + node2Spot;
        } else {
            if (node1Spot > node2Spot) {
                distanceBetween = node1Spot - node2Spot;
            } else {
                distanceBetween = node2Spot - node1Spot;
            }
        }
        return distanceBetween;
    };
};




/////FULL CLASS I'M USING FOR TESTING:

class Node {
    constructor(data, left = null, right = null) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

class BST {
    constructor() {
        this.root = null;
    }

    add(data) {
        const node = this.root;
        if (node === null) {
            //If this is the first node it will equal null, so we will just set root to the new data we are adding
            this.root = new Node(data);
            return;
        } else { //If it's not the first node, we use the below recursive function to determine where to put the new node/data
            const searchTree = function(node) {
                if (data < node.data) { //The node will go to the left side of the tree if the data is less than the data at the root since node = this.root
                    if (node.left === null) { //If the left side doesn't exist yet, we're just going to create a new node there
                        node.left = new Node(data);
                        return;
                    } else if (node.left !== null) { //Otherwise, if a left node does exist, we're going to keep running the function searchTree until it is null (until it reaches the end) then put the new node there
                        return searchTree(node.left);
                    }
                } else if (data > node.data) { //If the new data is more than root data, we're going to put it to the right side of tree
                    if (node.right === null) { //We do the same checks here as above, searching through tree to find the end then inserting new node/data
                        node.right = new Node(data);
                        return;
                    } else if (node.right !== null) {
                        return searchTree(node.right);
                    }
                } else { //If the new data is not more than or less than the data at the root (i.e. they are equal), we won't add the data
                    return null;
                }
            };
            return searchTree(node); //How we initially call the searchTree function to get the whole process started
        }
    };

    findMin() { //Since all the lower values are stored to the left, the one at the bottom of the left side of tree is minimum. This finds bottom left then returns data at bottom left
        let current = this.root;
        while (current.left !== null) {
            current = current.left;
        }
        return current.data;
    };

    findMax() { //This does the same as findMin but traverses the right side since that's where all the larger values are
        let current = this.root;
        while (current.right !== null) {
            current = current.right;
        }
        return current.data;
    };

    find(data) {
        let current = this.root;
        let distance = 0;
        while (current.data !== data) {
            if (data < current.data) {
                current = current.left;
                distance += 1;
            } else {
                current = current.right;
                distance += 1;
            }
            if (current === null) {
                return null;
            }
        }
        return distance;
    };

    isPresent(data) {
        let current = this.root;
        while (current) {
            if (data === current.data) {
                return true;
            }
            if (data < current.data) {
                current = current.left;
            } else {
                current = current.right;
            }
        }
        return false;
    };

    findDistance(node1, node2) {
        const ancestor = this.root;
        const node1Spot = find(node1);
        const node2Spot = find(node2);
        let distanceBetween;
        console.log(node1Spot);
        console.log(node2Spot);
        if ((node1 > ancestor && node2 < ancestor) || (node1 < ancestor && node2 > ancestor)) {
            distanceBetween = node1Spot + node2Spot;
        } else {
            if (node1Spot > node2Spot) {
                distanceBetween = node1Spot - node2Spot;
            } else {
                distanceBetween = node2Spot - node1Spot;
            }
        }
        return distanceBetween;
    };
};