1. Trees are a group of data structures that represent a hierarchical organization of data, similar to a family tree.
Binary trees are distinct in that they can have at most two child nodes branching off from a parent node. All binary trees
are tree data structures, but not all tree data structures are binary. 

2. In computer science, a heuristic references algorithmic guesses that aim to reduce the length of time required to solve a problem. 
Essentially, it is using previously obtained information to form judgements (a.k.a. guesses) that bring an algorithm closer to finding a solution.

3. Heuristics might be used by more advanced software such as the Amazon Alexa or Google Home to decipher the meaning of input.
For instance, if I say "Hey Google, tell me what the weather is like today," she knows that I'm not asking about the weather in India, but that I'm
asking what the weather will be like where I live.

4. A depth-first search searches the depth of a node branch until it reaches the end, then traverses back up the branch to search all other branch offs. 
Conversely, a breadth-first search goes row by row searching siblings before searching children. In essence, depth-first goes vertically whereas breadth-first runs horizontally.

5. Undirected means the graph is not linear and a node could theoretically be connected to any other node. It is the opposite of a linked list, where each node is connected in order. 
A-cyclic refers to the fact that a circular connection cannot be made. For instance, if there are four nodes (1, 2, 3, 4) connected in order, node 4 will not point back to node 1. Finally,
unweighted means that each node carries the same "weight" or significance relative to all other nodes and travel between two nodes is just as "costly" as travel between two different nodes.

6. A binary tree would be a directed, a-cyclic, unweighted graph.

PROGRAMMING QUESTIONS

1.

class Node {
    constructor(data, left = null, right = null) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
};

class BST {
    constructor() {
        this.root = null;
    }

    isPresent(data) {
        let current = this.root;
        while (current) {
            if (data === current.data) {
                return true;
            }
            if (data < current.data) {
                current = current.left;
            } else {
                current = current.right;
            }
        }
        return false;
    };
};


2.

class Node {
    constructor(data, left = null, right = null) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
};

class BST {
    constructor() {
        this.root = null;
    }

    find(data) {
        let current = this.root;
        let distance = 0;
        while (current.data !== data) {
            if (data < current.data) {
                current = current.left;
                distance += 1;
            } else {
                current = current.right;
                distance += 1;
            }
            if (current === null) {
                return null;
            }
        }
        return distance;
    };

    findDistance(node1, node2) {
        const ancestor = this.root;
        const node1Spot = this.find(node1);
        const node2Spot = this.find(node2);
        let distanceBetween;
        if ((node1 > ancestor && node2 < ancestor) || (node1 < ancestor && node2 > ancestor)) {
            distanceBetween = node1Spot + node2Spot;
        } else {
            if (node1Spot > node2Spot) {
                distanceBetween = node1Spot - node2Spot;
            } else {
                distanceBetween = node2Spot - node1Spot;
            }
        }
        return distanceBetween;
    };
};